QUESTION
--------
1) Design and implement a car dealership inventory which stores car information and also tracks the parking spaces available in the lot. Write a function to update the dealership's inventory. It should take as input a list of cars that are to be added and/or removed from the system. The bulk order of incoming cars should be processed only if there is enough space for all the cars in the parking lot.

2) Design and implement a warehouse of the dealership which stores information related to the type of cars purchased by each customer. Write a function which takes in a customer profile and based on the internal rules of the warehouse, returns an ordered list (by price) of cars that the customer is most likely to purchase.
-------------------------------------------------------------------------------
List of files
-------------
- com.ae (folder/package)
-- Car.java
-- CustomerProfile.java
-- Inventory.java
-- Warehouse.java
- com.ae.constants (folder/package)
-- Constants.java
- com.ae.test (folder/package)
-- AllTests.java (JUNIT - test suite)
-- InventoryTest.java
-- WarehouseTest.java
-------------------------------------------------------------------------------
Car.java
--------
Contains information about a car.
Variables
---------
- make
- model
- year
- color
- price
- size

model can take in one among the values such as HATCHBACK, SEDAN, SUV, CONVERTIBLE, MINIVAN, TRUCK and so this is represented using enum CarModel. size can take in one among the values such as COMPACT, MIDSIZE, LARGE and so this is represeted using another enum CarSize.
-------------------------------------------------------------------------------
CustomerProfile.java
--------------------
Contains information about the customer
Variables
---------
- age
- income
- gender
- carInterest

gender can be either MALE or FEMALE and so is represented using an enum Gender. carInterest has been considered to be the type of car the customer is interested in. Therefore this has been considered to take car model values and so its type is the enum CarModel.
-------------------------------------------------------------------------------
Inventory.java
--------------
Contains inventory information
Variables
---------
- cars - list to store cars present in inventory
- smallSpace - stores the number of small parking spaces available
- mediumSpace
- largeSpace

Methods
-------
- updateInventory(List<Car> carsToRemove, List<Car> carsToAdd) - It takes as input a list of cars to be removed (carsToRemove) and a list of cars to be added (carsToAdd). Calls corresponding methods to add and remove cars from the inventory. The cars stored in carsToRemove are removed first and then the cars stored in carsToAdd are added to the inventory. It adds cars only if all the cars can be added and if not, it prints an "OUT OF SPACE" message.
(NOTE -- ADDRESSES QUESTION 2 OF THE CODING CHALLENGE. THIS METHOD HAS TO BE CALLED IF THE INVENTORY HAS TO BE UPDATED)

- addCars(List<Car> carsToAdd) - The method that is responsible for adding cars into the inventory. It adds carsToAdd into the inventory only if there is enough space in the inventory to process the bulk order. If not "OUT OF SPACE" is printed out. It also updates the parking spots available based on the order that has been processed.

- removeCars(List<Car> carsToRemove) - The method that is responsible for removing cars from the inventory. The cars are removed sequentially and does not need to check if the bulk order can be processed. If cars that are present in the inventory is present in carsToRemove, those cars are removed from the inventory and the others that are not present in the inventory are ignored. Parking spaces are updated accordingly.

- getRemainingSpace() - Prints out the small, medium and large parking spaces that are available.
-------------------------------------------------------------------------------
Warehouse.java
--------------
Contains information about the warehouse
Variables
---------
- customerInfo - It stores the list of customer profiles. (NOTE -- THIS WAS NOT NEEDED FOR THE QUESTIONS IN THE CODING CHALLENGE TO BE ADDRESSED. THIS CAN POTENTIALLY BE USED TO UNDERSTAND THE TYPE OF CARS THAT DIFFERENT CUSTOMERS LIKE.)
- Rules - Internal rules stored in the warehouse. 3 internal rules have been considered as part of this implementation. It can be AGE, INCOME or INTEREST. The cars are suggested based on this rule.

Methods
-------
- carSuggestion(CustomerProfile profile, Inventory inventory, Rules rule) - Takes in a customer profile as input along with the inventory and rule based on which the cars have to be suggested. It returns an ordered list of cars (in descending order based on price) that the customer is most likely to purchase.
(NOTE -- ADDRESSED QUESTION 1 OF THE CODING CHALLENGE. THIS METHOD HAS TO BE CALLED TO GET THE SUGGESTED LIST OF CARS.)

- carsPresent(CustomerProfile profile, Inventory inventory) - Checks if the inventory and profile are valid i.e they are not null and the list of cars in the inventory is not empty.

- getCarsBasedOnInterest(Inventory inventory, CustomerProfile profile, List<Car> suggestedCars) - This method gets called if the suggested cars are to be based on the customer's purchase/interest (INTEREST rule). This is also the default rule i.e if no rule is assigned in the main method.

- getCarsBasedOnIncome(Inventory inventory, CustomerProfile profile, List<Car> suggestedCars) - This method gets called if the suggested cars are to be based on the customer's income (INCOME rule). It finds out cars that have a price which is less than or equal to half of the customers income.

- getCarsBasedOnAge(Inventory inventory, CustomerProfile profile, List<Car> suggestedCars) - This method gets called if the suggested cars are to be based on the customer's age (AGE rule). If the age of the customer is less than 20, cars shouldn't be suggested. If between 20 and 30, convertibles should be suggested. If between 30 and 40, sedans should be suggested. If above 40, suvs should be suggested.

- getCarType(Inventory inventory, List<Car> suggestedCars, CarModel carType) - This is used to get cars based on it model.

- orderListOnPrice(List<Car> suggestedCars) - This method orders the cars in the suggested list in descending order based on price.
-------------------------------------------------------------------------------
Constants.java
--------------
Stores constants that are used in the other files.
-------------------------------------------------------------------------------
AllTests.java
-------------
This is the test suite to run InventoryTest.java and WarehouseTest.java
-------------------------------------------------------------------------------
InventoryTest.java
------------------
This is used to test QUESTION 2 of the coding challenge. It contains 11 tests. Some of the tests that are being done are : it checks if the default inventory contains the default number of parking spaces (10 for each), check that an error/message is shown on trying to add more cars than inventory's capacity, add cars only if bulk order can be processed etc.
-------------------------------------------------------------------------------
WarehouseTest.java
------------------
This is used to test QUESTION 1 of the coding challenge. It contains 12 tests. Some of the tests are : it checks if a valid customer profile and inventory is input, checks if the inventory has cars in it, checks if the suggested cars are based on the rule that is specified, checks if the returned list is ordered etc.
-------------------------------------------------------------------------------
Possible improvements (with more alloted time) or Limitations
-------------------------------------------------------------
1) A basic set of internal rules is used in the warehouse in the current implementation. This can further be improved by checking the gender of the customer to give suggestions and also taking a combination of these rules which would give more apt suggestions.
2) More number of test cases could be included.
3) Some hardcoded values are present in the test cases. These can be moved to the Constants file.
-------------------------------------------------------------------------------